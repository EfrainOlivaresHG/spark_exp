plugins {
    id 'com.jfrog.artifactory' version '3.1.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
    id 'org.sonarqube' version '1.2'
    id "com.github.samueltbrown.cucumber" version "0.9"
}

apply plugin: 'java'
apply plugin: 'checkstyle'

version = '0.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.+'
    compile 'org.apache.logging.log4j:log4j-core:2.+'
    
    testCompile 'junit:junit:4.+'
    testCompile 'org.powermock:powermock-mockito-release-full:1.6.2'
    testCompile 'info.cukes:cucumber-java:1.2.2'

    cucumberRuntime 'info.cukes:cucumber-java:1.2.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'HGData Library', 'Implementation-Version': project.version
	attributes 'Main-Class': 'com.hgdata.Main'
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    resolve {
        repoKey = 'libs-release'
        username = "${artifactory_user}" // The publisher user name
        password = "${artifactory_password}" // The publisher password
    }
}

cucumber {
    formats = ['pretty', 'html:target/site/cucumber', 'junit:target/site/cucumber/cucumber.xml', 'json:target/site/cucumber/cucumber.json']
}

String checkType

checkstyle {
    toolVersion = "6.18"
    configProperties.checkstyleConfigDir = "config/checkstyle"
}

checkstyleMain {
    ignoreFailures = false
    reports {
        include ( '**/*.java')
        xml {
            destination "${rootProject.projectDir}/target/site/checkstyle/main.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle.xml')
}

checkstyleTest {
    ignoreFailures = false
    reports {
        include ( '**/*.java')
        xml {
            destination "${rootProject.projectDir}/target/site/checkstyle/test.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle.xml')
}


task checkstyleReport << {
    checkType = "main"
    if (file("$projectDir/target/site/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$projectDir/target/site/checkstyle/${checkType}.xml",
                style:"config/checkstyle/checkstyleHTML.xsl",
                out:"$projectDir/target/site/checkstyle/index.html"
        )
    }
}

task quality(dependsOn:['checkstyleMain', 'checkstyleTest'])

gradle.taskGraph.afterTask {Task task, TaskState state ->
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    checkType = matcher.group(1).toLowerCase()
                }
            }
            checkstyleReport.execute()
        }
}
